/* automatically generated by rust-bindgen */

use std::libc::*;
pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub struct __fsid_t {
    pub __val: [c_int, ..2u],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __daddr_t = c_int;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *mut c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __fsword_t = c_long;
pub type __ssize_t = c_long;
pub type __syscall_slong_t = c_long;
pub type __syscall_ulong_t = c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut c_schar;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ptrdiff_t = c_long;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type ulong = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulong;
pub type register_t = c_long;
pub type __sig_atomic_t = c_int;
pub struct __sigset_t {
    pub __val: [c_ulong, ..16u],
}
pub type sigset_t = __sigset_t;
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = c_long;
pub struct fd_set {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = c_ulong;
pub struct Union_pthread_attr_t {
    pub data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
pub struct Struct___pthread_mutex_s {
    pub __lock: c_int,
    pub __count: c_uint,
    pub __owner: c_int,
    pub __nusers: c_uint,
    pub __kind: c_int,
    pub __spins: c_int,
    pub __list: __pthread_list_t,
}
pub struct pthread_mutex_t {
    pub data: [u64, ..5u],
}
impl pthread_mutex_t {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..40u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_mutexattr_t {
    pub data: [u32, ..1u],
}
impl pthread_mutexattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct Struct_Unnamed1 {
    pub __lock: c_int,
    pub __futex: c_uint,
    pub __total_seq: c_ulonglong,
    pub __wakeup_seq: c_ulonglong,
    pub __woken_seq: c_ulonglong,
    pub __mutex: *mut c_void,
    pub __nwaiters: c_uint,
    pub __broadcast_seq: c_uint,
}
pub struct pthread_cond_t {
    pub data: [u64, ..6u],
}
impl pthread_cond_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed1 {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..48u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_condattr_t {
    pub data: [u32, ..1u],
}
impl pthread_condattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type pthread_key_t = c_uint;
pub type pthread_once_t = c_int;
pub struct Struct_Unnamed2 {
    pub __lock: c_int,
    pub __nr_readers: c_uint,
    pub __readers_wakeup: c_uint,
    pub __writer_wakeup: c_uint,
    pub __nr_readers_queued: c_uint,
    pub __nr_writers_queued: c_uint,
    pub __writer: c_int,
    pub __shared: c_int,
    pub __pad1: c_ulong,
    pub __pad2: c_ulong,
    pub __flags: c_uint,
}
pub struct pthread_rwlock_t {
    pub data: [u64, ..7u],
}
impl pthread_rwlock_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_rwlockattr_t {
    pub data: [u64, ..1u],
}
impl pthread_rwlockattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..8u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type pthread_spinlock_t = c_int;
pub struct pthread_barrier_t {
    pub data: [u64, ..4u],
}
impl pthread_barrier_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..32u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct pthread_barrierattr_t {
    pub data: [u32, ..1u],
}
impl pthread_barrierattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type s_reg_t = c_long;
pub type active_reg_t = c_ulong;
pub type reg_syntax_t = c_ulong;
pub type reg_errcode_t = c_int;
pub static REG_ENOSYS: c_int = -1;
pub static REG_NOERROR: c_int = 0;
pub static REG_NOMATCH: c_int = 1;
pub static REG_BADPAT: c_int = 2;
pub static REG_ECOLLATE: c_int = 3;
pub static REG_ECTYPE: c_int = 4;
pub static REG_EESCAPE: c_int = 5;
pub static REG_ESUBREG: c_int = 6;
pub static REG_EBRACK: c_int = 7;
pub static REG_EPAREN: c_int = 8;
pub static REG_EBRACE: c_int = 9;
pub static REG_BADBR: c_int = 10;
pub static REG_ERANGE: c_int = 11;
pub static REG_ESPACE: c_int = 12;
pub static REG_BADRPT: c_int = 13;
pub static REG_EEND: c_int = 14;
pub static REG_ESIZE: c_int = 15;
pub static REG_ERPAREN: c_int = 16;
pub struct Struct_re_pattern_buffer {
    pub __buffer: *mut c_uchar,
    pub __allocated: c_ulong,
    pub __used: c_ulong,
    pub __syntax: reg_syntax_t,
    pub __fastmap: *mut c_schar,
    pub __translate: *mut c_uchar,
    pub re_nsub: size_t,
    pub __can_be_null: c_uint,
    pub __regs_allocated: c_uint,
    pub __fastmap_accurate: c_uint,
    pub __no_sub: c_uint,
    pub __not_bol: c_uint,
    pub __not_eol: c_uint,
    pub __newline_anchor: c_uint,
}
pub type regex_t = Struct_re_pattern_buffer;
pub type regoff_t = c_int;
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
extern "C" {
    pub static mut re_syntax_options: reg_syntax_t;
    pub fn select(__nfds: c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> c_int;
    pub fn pselect(__nfds: c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *Struct_timespec, __sigmask: *__sigset_t) ->
     c_int;
    pub fn gnu_dev_major(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_minor(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_makedev(__major: c_uint, __minor: c_uint) -> c_ulonglong;
    pub fn regcomp(__preg: *mut regex_t, __pattern: *c_schar, __cflags: c_int)
     -> c_int;
    pub fn regexec(__preg: *regex_t, __string: *c_schar, __nmatch: size_t,
                   __pmatch: c_void, __eflags: c_int) -> c_int;
    pub fn regerror(__errcode: c_int, __preg: *regex_t,
                    __errbuf: *mut c_schar, __errbuf_size: size_t) -> size_t;
    pub fn regfree(__preg: *mut regex_t);
}
